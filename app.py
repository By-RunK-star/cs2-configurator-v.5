# app.py ‚Äî CS2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä (RU)
# –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å –¥–æ–Ω–∞—Ç-–ø–ª–∞—à–∫–æ–π, —Å–æ—Ü.–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –¥–ª—è AMD.

import pandas as pd
import streamlit as st

# --------------------------- –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´ ---------------------------
st.set_page_config(
    page_title="CS2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä",
    page_icon="üéÆ",
    layout="centered"
)

# --------------------------- CSS –°–¢–ò–õ–ò ---------------------------
st.markdown("""
<style>
/* –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ */
html, body, [class*="css"]  { font-family: "Inter", system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }

/* —Å–µ–∫—Ü–∏—è —Å–æ—Ü.–∫–Ω–æ–ø–æ–∫ */
.social-wrap {
  display: flex; gap: 10px; flex-wrap: wrap; margin-top: 8px; margin-bottom: 6px;
}
.social-btn {
  text-decoration: none; padding: 8px 12px; border-radius: 8px; font-weight: 600; font-size: 14px;
  display: inline-flex; align-items: center; gap: 8px; transition: transform .1s ease, box-shadow .1s ease;
  color: white !important;
}
.social-btn:hover { transform: translateY(-1px); box-shadow: 0 6px 18px rgba(0,0,0,.15); }
.tiktok { background: #000000; }
.youtube { background: #FF0000; }
.twitch { background: #9146FF; }

/* –¥–æ–Ω–∞—Ç-–ø–ª–∞—à–∫–∞ ‚Äî –º—è–≥–∫–∞—è, —Å –ª—ë–≥–∫–æ–π –ø—É–ª—å—Å–∞—Ü–∏–µ–π */
.donate-card {
  position: relative;
  border-radius: 14px;
  padding: 16px 16px;
  background: linear-gradient(180deg, #111, #171717);
  border: 1px solid #2a2a2a;
  color: #fff;
  margin: 8px 0 2px 0;
  box-shadow: 0 6px 22px rgba(0,0,0,0.25);
  overflow: hidden;
}
.donate-card h3 { margin: 0 0 6px 0; font-size: 18px; }
.donate-card p { margin: 0 0 10px 0; opacity: .92; }
.pulse-ring {
  position: absolute; inset: -2px;
  border-radius: 16px;
  pointer-events: none;
  animation: softPulse 2.2s ease-in-out infinite;
  border: 2px solid rgba(255, 214, 64, 0.22);
}
@keyframes softPulse {
  0%   { box-shadow: 0 0 0 0 rgba(255,214,64,0.18); }
  70%  { box-shadow: 0 0 0 12px rgba(255,214,64,0.06); }
  100% { box-shadow: 0 0 0 0 rgba(255,214,64,0.00); }
}
.donate-link {
  display: inline-block; text-decoration: none; padding: 8px 12px; border-radius: 8px;
  font-weight: 700; background: #ffd740; color: #222 !important;
  transition: transform .08s ease, box-shadow .08s ease;
}
.donate-link:hover { transform: translateY(-1px); box-shadow: 0 6px 18px rgba(255,215,64,.35); }

/* –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */
.result-card {
  border-radius: 12px; border: 1px solid #e9e9e9; padding: 14px;
  background: #fff;
}
.code-box {
  font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
  background: #0f172a; color: #e2e8f0; padding: 10px 12px; border-radius: 8px; margin: 6px 0 10px 0;
  white-space: pre-wrap; word-break: break-word;
}
.small-muted { color: #667085; font-size: 13px; }
</style>
""", unsafe_allow_html=True)

# --------------------------- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---------------------------
@st.cache_data
def load_data() -> pd.DataFrame:
    df = pd.read_csv("builds.csv")

    # –§—É–Ω–∫—Ü–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ ¬´–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–º¬ª –∏–º–µ–Ω–∞–º
    def ensure_col(frame: pd.DataFrame, canon: str, variants: list[str]) -> pd.DataFrame:
        for v in variants:
            if v in frame.columns:
                frame[canon] = frame[v]
                break
        if canon not in frame.columns:
            frame[canon] = ""
        return frame

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    df = ensure_col(df, "CPU", ["CPU", "Processor"])
    df = ensure_col(df, "GPU", ["GPU", "Graphics"])
    df = ensure_col(df, "RAM", ["RAM", "Memory"])
    df = ensure_col(df, "RAM Channel", ["RAM Channel", "RAMChannel", "Memory Channel"])
    df = ensure_col(df, "Game Settings", ["Game Settings", "Settings", "GameSettings"])
    df = ensure_col(df, "Launch Options", ["Launch Options", "Launch", "Params", "LaunchOptions"])
    df = ensure_col(df, "Control Panel", ["Control Panel", "ControlPanel", "Driver Settings", "Driver"])
    df = ensure_col(df, "Windows Optimization", ["Windows Optimization", "Windows Optimizations", "Windows", "Windows Opt", "Windows Tweaks"])
    df = ensure_col(df, "FPS Estimate", ["FPS Estimate", "FPS", "FPS Range", "Estimate"])
    df = ensure_col(df, "Source", ["Source"])

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RAM (—á—Ç–æ–±—ã ¬´16GB¬ª ‚Üí ¬´16 GB¬ª)
    df["RAM"] = df["RAM"].astype(str).str.replace("GB", " GB", regex=False).str.replace("  ", " ", regex=False).str.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RAM Channel
    df["RAM Channel"] = df["RAM Channel"].astype(str).str.strip()
    df.loc[df["RAM Channel"].str.len() == 0, "RAM Channel"] = "‚Äî"

    return df

df = load_data()

# --------------------------- –£–¢–ò–õ–ò–¢–´ ---------------------------
def clean_launch_options(s: str) -> str:
    """–£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è CS2: -novid, -nojoy; —á–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã."""
    if not isinstance(s, str):
        return ""
    tokens = s.split()
    banned = {"-novid", "-nojoy"}
    tokens = [t for t in tokens if t not in banned]
    cleaned = " ".join(tokens)
    while "  " in cleaned:
        cleaned = cleaned.replace("  ", " ")
    return cleaned.strip()

def is_amd_gpu(name: str) -> bool:
    if not isinstance(name, str):
        return False
    n = name.lower()
    return any(k in n for k in ["amd", "radeon", " rx", " rx ", " r9", " r7", " r5"])

def show_amd_global_warning():
    st.warning(
        "### –í–∞–∂–Ω–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ AMD (Radeon)\n"
        "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ **–≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ CS2**, –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ:\n"
        "- **Anti-Lag / Anti-Lag+ / Anti-Lag 2** ‚Äî –Ω–µ –≤–∫–ª—é—á–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω–æ. –¢–æ–ª—å–∫–æ –ø–æ–∏–≥—Ä–æ–≤–æ.\n"
        "- **Chill (Global)** ‚Äî –º–æ–∂–µ—Ç –∑–∞–Ω–∏–∂–∞—Ç—å FPS –∏ –¥—ë—Ä–≥–∞—Ç—å —Ñ—Ä–µ–π–º—Ç–∞–π–º.\n"
        "- **FRTC (Global)** ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç FPS –ø–æ–≤—ã—à–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å `fps_max`.\n"
        "- **V-Sync = Always On (Global)** ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É.\n"
        "- **Enhanced Sync (Global)** ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã —Ñ–ª–∏–∫–µ—Ä—ã/—Ä–∞–∑—Ä—ã–≤—ã.\n"
        "- **RSR/VSR (Global)** ‚Äî –Ω–µ –æ–ø–∞—Å–Ω–æ, –Ω–æ –±—ã–≤–∞–µ—Ç –±–ª—é—Ä–∏—Ç –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ö–≤–∞—Ç; –≤–∫–ª—é—á–∞–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.\n"
        "- **Tessellation Override / AF Override / MLAA (Global)** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **Use application settings** –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ –∏–≥—Ä–µ.\n\n"
        "‚û°Ô∏è –ü—É—Ç—å: **AMD Adrenalin ‚Üí Gaming ‚Üí Games ‚Üí CS2** ‚Üí —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –≤—Å—ë —Ç–∞–º.",
        icon="‚ö†Ô∏è"
    )

# –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è
def g(row: dict, key: str, fallback: str = "") -> str:
    v = row.get(key, fallback)
    return "" if pd.isna(v) else str(v)

# --------------------------- –®–ê–ü–ö–ê ---------------------------
st.title("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä CS2")
st.caption("–ü–æ–¥–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å–≤–æ–µ–π —Å–±–æ—Ä–∫–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã, –ø–∞–Ω–µ–ª—å –¥—Ä–∞–π–≤–µ—Ä–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Windows.")

# –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
st.subheader("üì£ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∞–≤—Ç–æ—Ä–∞")
st.markdown(
    """
<div class="social-wrap">
  <a class="social-btn tiktok"   href="https://www.tiktok.com/@melevik?_t=ZS-8zQkTQnA4Pf&_r=1" target="_blank">üéµ TikTok</a>
  <a class="social-btn youtube"  href="https://youtube.com/@melevik-avlaron?si=kRXrCD7GUrVnk478" target="_blank">‚ñ∂Ô∏è YouTube</a>
  <a class="social-btn twitch"   href="https://m.twitch.tv/melevik/home" target="_blank">üü£ Twitch</a>
</div>
""",
    unsafe_allow_html=True
)

st.markdown("---")

# --------------------------- –§–ò–õ–¨–¢–†–´ ---------------------------
col1, col2 = st.columns(2)
with col1:
    cpu = st.selectbox("üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU):", sorted(df["CPU"].dropna().unique()))
with col2:
    gpu = st.selectbox("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (GPU):", sorted(df["GPU"].dropna().unique()))

ram = st.selectbox("üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å (RAM):", sorted(df["RAM"].dropna().unique()))

# –ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RAM ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –µ—Å—Ç—å –∏ –≤ –Ω–µ–π –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
ram_channel_selector = None
if "RAM Channel" in df.columns and (df["RAM Channel"] != "‚Äî").any():
    ram_channel_selector = st.selectbox("üß† –ö–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏:", ["–ù–µ–≤–∞–∂–Ω–æ", "Single", "Dual"])
else:
    ram_channel_selector = "–ù–µ–≤–∞–∂–Ω–æ"

# --------------------------- –ü–û–ò–°–ö ---------------------------
if st.button("üîç –ù–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
    q = (df["CPU"] == cpu) & (df["GPU"] == gpu) & (df["RAM"] == ram)
    if ram_channel_selector in ["Single", "Dual"] and "RAM Channel" in df.columns:
        q = q & (df["RAM Channel"].str.lower() == ram_channel_selector.lower())

    result = df[q]

    st.markdown("---")

    if result.empty:
        st.error("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
    else:
        row = result.iloc[0].to_dict()

        # AMD –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if is_amd_gpu(g(row, "GPU")):
            show_amd_global_warning()

        # –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞
        launch_clean = clean_launch_options(g(row, "Launch Options"))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.subheader("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.markdown(
            f"""
<div class="result-card">
<b>üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {g(row, "CPU")}  
<b>üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:</b> {g(row, "GPU")}  
<b>üíæ –û–ó–£:</b> {g(row, "RAM")}{"  ¬∑  "+g(row, "RAM Channel") if g(row, "RAM Channel") not in ("", "‚Äî") else ""}

<b>üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:</b><br/>
{g(row, "Game Settings")}

<b>üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ (–æ—á–∏—â–µ–Ω–Ω—ã–µ):</b>
<div class="code-box">{launch_clean if launch_clean else "‚Äî"}</div>

<b>üéõ –ü–∞–Ω–µ–ª—å –¥—Ä–∞–π–≤–µ—Ä–∞ (NVIDIA/AMD):</b><br/>
{g(row, "Control Panel")}

<b>ü™ü –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows (–ø–æ –∂–µ–ª–∞–Ω–∏—é):</b><br/>
{g(row, "Windows Optimization")}

<b>üìä –û–∂–∏–¥–∞–µ–º—ã–π FPS:</b> {g(row, "FPS Estimate", "‚Äî")}  
<span class="small-muted"><b>üîó –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {g(row, "Source", "‚Äî")}</span>
</div>
""",
            unsafe_allow_html=True
        )

        # –£–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç-–ø—Ä–æ—Ñ–∏–ª—å + —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        profile_txt = (
            f"CPU: {g(row,'CPU')}\n"
            f"GPU: {g(row,'GPU')}\n"
            f"RAM: {g(row,'RAM')} {('('+g(row,'RAM Channel')+')') if g(row,'RAM Channel') not in ('','‚Äî') else ''}\n\n"
            f"[Game Settings]\n{g(row,'Game Settings')}\n\n"
            f"[Launch Options]\n{launch_clean}\n\n"
            f"[Control Panel]\n{g(row,'Control Panel')}\n\n"
            f"[Windows Optimization]\n{g(row,'Windows Optimization')}\n\n"
            f"FPS Estimate: {g(row,'FPS Estimate','‚Äî')}\n"
            f"Source: {g(row,'Source','‚Äî')}\n"
        )
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (.txt)", data=profile_txt, file_name="cs2_profile.txt", type="primary")

st.markdown("---")

# --------------------------- –î–û–ù–ê–¢-–ü–õ–ê–®–ö–ê ---------------------------
st.markdown(
    """
<div class="donate-card">
  <div class="pulse-ring"></div>
  <h3>üíõ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç</h3>
  <p>–ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ä—É–±–ª—ë–º ‚Äî –ø–æ–ø–∞–¥—ë—Ç –≤ <b>—Å–ª–µ–¥—É—é—â–∏–π —Ä–æ–ª–∏–∫</b>. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å–æ–æ–±—â–µ—Å—Ç–≤—É!</p>
  <a class="donate-link" href="https://www.donationalerts.com/r/melevik" target="_blank">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ DonatPay</a>
</div>
""",
    unsafe_allow_html=True
)
st.caption("–ß–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî —Ç–µ–º —á–∞—â–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –±–∞–∑—É —Å–±–æ—Ä–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

