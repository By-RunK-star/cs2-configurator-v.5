# -*- coding: utf-8 -*-
import re
import pandas as pd
import streamlit as st

st.set_page_config(page_title="CS2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä", page_icon="üéÆ", layout="centered")

# ------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------------

def canon_ram(s: str) -> str:
    s = str(s or "").lower().replace("–≥–±", "gb")
    m = re.search(r'(\d+)', s)
    num = m.group(1) if m else ""
    return f"{num}gb" if num else s.replace(" ", "")

def canon_cpu(s: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–æ–¥ –∫ —Å–µ–º–µ–π–Ω–æ–º—É –∫–ª—é—á—É, –∫–∞–∫ –≤ builds.csv:
    i3-10100F -> i3 10th gen
    i5-12400F -> i5 12th gen
    Ryzen 5 5600 -> ryzen 5 5000
    """
    x = (s or "").lower()
    x = re.sub(r'\(.*?\)|‚Ñ¢|¬Æ', '', x)
    x = x.replace("processor", "").replace("core", "")
    x = x.replace("intel", "").replace("amd", "").strip()
    x = re.sub(r'\s+', ' ', x)

    # Intel Core i3/i5/i7/i9
    m = re.search(r'(i[3579])[\s\-]*([0-9]{3,5})?', x)
    if m:
        fam = m.group(1).lower()
        digits = m.group(2)
        gen = None
        # "10th/11th/12th gen" –≤ —Ç–µ–∫—Å—Ç–µ
        m2 = re.search(r'([0-9]{1,2})\s*(st|nd|rd|th)?\s*gen', x)
        if m2:
            gen = int(m2.group(1))
        # –ø–æ —Ü–∏—Ñ—Ä–∞–º –º–æ–¥–µ–ª–∏
        if gen is None and digits:
            if len(digits) >= 5:      # 10100, 12400, 14600 => 10/12/14 gen
                gen = int(digits[:2])
            elif len(digits) == 4:    # 8700, 9400 => 8/9 gen
                gen = int(digits[0])
            elif len(digits) == 3:    # 710 => 7 gen (–Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
                gen = int(digits[0])

        if gen:
            return f"{fam} {gen}th gen"
        # –≤–¥—Ä—É–≥ —É–∂–µ –±—ã–ª–æ "i5 12th gen"
        if "gen" in x:
            keep = [w for w in x.split() if w in ["i3", "i5", "i7", "i9", "10th", "11th", "12th", "13th", "14th", "gen"]]
            if keep:
                return " ".join(keep)
        return fam  # fallback

    # AMD Ryzen
    m = re.search(r'ryzen\s*([3579])\s*-?\s*([0-9]{3,4})?', x)
    if m:
        fam = m.group(1)  # "5" –∏–∑ "Ryzen 5"
        digits = m.group(2)
        gen = None
        if digits:
            # 5600, 3600, 2600...
            gen = int(digits[0]) * 1000
        if gen:
            label = {1: "1000", 2: "2000", 3: "3000", 4: "4000", 5: "5000", 7: "7000"}.get(int(str(gen)[0]), str(gen))
            return f"ryzen {fam} {label}"
        # –≤–¥—Ä—É–≥ —É–∂–µ –≤–∏–¥–∞ "ryzen 5 5000"
        m2 = re.search(r'ryzen\s*[3579]\s*[1275]000', x)
        if m2:
            return re.sub(r'\s+', ' ', m2.group(0))
        return f"ryzen {fam}"

    return re.sub(r'\s+', ' ', x).strip()

def canon_gpu(s: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º GPU –∫ –∫–ª—é—á—É:
    "GeForce RTX 3060 Ti 8GB" -> "rtx 3060 ti"
    "Radeon RX 580" -> "rx 580"
    """
    x = (s or "").lower()
    x = x.replace("nvidia", "").replace("geforce", "").replace("amd", "").replace("radeon", "")
    x = re.sub(r'\s+', ' ', x).strip()

    variant = ""
    if "super" in x:
        variant = " super"
    elif re.search(r'\bti\b', x) or "ti" in x.replace(" ", ""):
        variant = " ti"
    elif re.search(r'\bxt\b', x):
        variant = " xt"

    fam = ""
    if "rtx" in x:
        fam = "rtx"
    elif "gtx" in x:
        fam = "gtx"
    elif "rx" in x:
        fam = "rx"

    m = re.search(r'(\d{3,4})', x)
    num = m.group(1) if m else ""

    if fam and num:
        return f"{fam} {int(num)}{variant}"

    return x

def ensure_col(df: pd.DataFrame, canon: str, variants: list[str]) -> pd.DataFrame:
    for v in variants:
        if v in df.columns:
            df[canon] = df[v]
            break
    if canon not in df.columns:
        df[canon] = ""
    return df

def make_keys(df: pd.DataFrame) -> pd.DataFrame:
    df["RAM"] = (
        df["RAM"].astype(str)
        .str.replace("–ì–ë", "GB", regex=False)
        .str.replace("GB", " GB", regex=False)
        .str.replace("  ", " ", regex=False)
        .str.strip()
    )
    df["_cpu_key"] = df["CPU"].map(canon_cpu)
    df["_gpu_key"] = df["GPU"].map(canon_gpu)
    df["_ram_key"] = df["RAM"].map(canon_ram)
    return df

@st.cache_data
def load_data():
    df = pd.read_csv("builds.csv")
    # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫ –∫–∞–Ω–æ–Ω—É
    df = ensure_col(df, "Game Settings", ["Game Settings", "Settings", "GameSettings"])
    df = ensure_col(df, "Launch Options", ["Launch Options", "Launch", "Params", "LaunchOptions"])
    df = ensure_col(df, "Control Panel", ["Control Panel", "ControlPanel", "Driver Settings", "Driver"])
    df = ensure_col(df, "Windows Optimization", ["Windows Optimization", "Windows Optimizations", "Windows", "Windows Opt"])
    df = ensure_col(df, "FPS Estimate", ["FPS Estimate", "FPS", "FPS Range", "Estimate"])
    df = ensure_col(df, "Source", ["Source"])
    df = make_keys(df)
    return df

builds = load_data()

# ------------------------------
# UI
# ------------------------------
st.title("‚öôÔ∏è CS2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä (–æ–Ω–ª–∞–π–Ω)")
st.caption("–ü–æ–¥–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –∏–≥—Ä–∞, –ø–∞–Ω–µ–ª—å –¥—Ä–∞–π–≤–µ—Ä–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Windows. –ü–æ–∏—Å–∫ —É—Å—Ç–æ–π—á–∏–≤ –∫ —Ä–∞–∑–Ω—ã–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è–º.")

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–∏–≤—ã—á–Ω—ã–π –≤–∏–¥)
col1, col2, col3 = st.columns([1,1,1])
with col1:
    cpu_in = st.text_input("üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", placeholder="Intel i5-12400F")
with col2:
    gpu_in = st.text_input("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", placeholder="RTX 3060 Ti")
with col3:
    ram_in = st.text_input("üíæ –û–ó–£", placeholder="16 GB")

st.markdown("---")

# –ë–ª–æ–∫ –¥–æ–Ω–∞—Ç–∞ (–º—è–≥–∫–∞—è –∂—ë–ª—Ç–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è)
st.markdown("""
<div style="padding:12px;border-radius:10px;background:linear-gradient(90deg,#FFF3B0,#FFE066,#FFF3B0);
            animation:pulse 2s ease-in-out infinite; text-align:center;">
  <b>–ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ä—É–±–ª—ë–º ‚Äî –ø–æ–ø–∞–¥—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ–ª–∏–∫ (—Ç–∏—Ç—Ä—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏)!</b><br>
  üëâ <a href="https://www.donationalerts.com/r/melevik" target="_blank">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ DonatPay / DonationAlerts</a>
</div>
<style>
@keyframes pulse {
  0% { filter: brightness(0.98); }
  50% { filter: brightness(1.06); }
  100% { filter: brightness(0.98); }
}
</style>
""", unsafe_allow_html=True)

# –°–æ—Ü—Å–µ—Ç–∏ –≤ —Ü–≤–µ—Ç–∞—Ö –ø–ª–æ—â–∞–¥–æ–∫
st.markdown("""
<div style="display:flex; gap:10px; margin-top:10px; flex-wrap:wrap;">
  <a href="https://www.tiktok.com/@melevik?_t=ZS-8zQkTQnA4Pf&_r=1" target="_blank"
     style="background:#000; color:#fff; padding:8px 12px; border-radius:8px; text-decoration:none;">TikTok</a>
  <a href="https://youtube.com/@melevik-avlaron?si=kRXrCD7GUrVnk478" target="_blank"
     style="background:#FF0000; color:#fff; padding:8px 12px; border-radius:8px; text-decoration:none;">YouTube</a>
  <a href="https://m.twitch.tv/melevik/home" target="_blank"
     style="background:#9146FF; color:#fff; padding:8px 12px; border-radius:8px; text-decoration:none;">Twitch</a>
</div>
""", unsafe_allow_html=True)

# –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ Twitch/YouTube
with st.expander("üé• Twitch ‚Äî –ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è (–µ—Å–ª–∏ –∏–¥—ë—Ç)"):
    st.components.v1.iframe(
        "https://player.twitch.tv/?channel=melevik&parent=streamlit.app",
        height=380, scrolling=True
    )
with st.expander("üì∫ YouTube ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ (–Ω–µ —à–æ—Ä—Ç—Å)"):
    st.components.v1.iframe(
        "https://www.youtube.com/embed?listType=user_uploads&list=melevik-avlaron",
        height=380, scrolling=True
    )

st.markdown("---")

# –ü–æ–∏—Å–∫
if st.button("üîç –ù–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
    cpu_key = canon_cpu(cpu_in)
    gpu_key = canon_gpu(gpu_in)
    ram_key = canon_ram(ram_in)

    # —Å—Ç—Ä–æ–≥–∏–π –º–∞—Ç—á –ø–æ –∫–ª—é—á–∞–º
    exact = builds[(builds["_cpu_key"] == cpu_key) &
                   (builds["_gpu_key"] == gpu_key) &
                   (builds["_ram_key"] == ram_key)]

    if exact.empty:
        # –ü–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ç–∞ –∂–µ —Å–µ—Ä–∏—è CPU –∏ —Ç–∞ –∂–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–µ)
        family_cpu = " ".join(cpu_key.split()[:2])  # i5 12th, ryzen 5 ...
        near = builds[
            (builds["_cpu_key"].str.contains(family_cpu, na=False)) &
            (builds["_gpu_key"] == gpu_key)
        ]
        # –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å–ª–∞–±–∏—Ç—å GPU –¥–æ —Å–µ–º–µ–π—Å—Ç–≤–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        if near.empty:
            base_gpu = gpu_key.replace(" ti", "").replace(" super", "").replace(" xt", "")
            near = builds[
                (builds["_cpu_key"].str.contains(family_cpu, na=False)) &
                (builds["_gpu_key"].str.startswith(base_gpu))
            ]

        if near.empty:
            st.warning("–ü–æ—Ö–æ–∂–µ, —Ç–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç. –í–æ—Ç –±–ª–∏–∑–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å–µ—Ä–∏–∏/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ (5 —à—Ç.):")
            st.dataframe(builds[["CPU","GPU","RAM","Game Settings","Launch Options","Control Panel","Windows Optimization","FPS Estimate"]].head(5))
        else:
            st.info("–¢–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –Ω–æ –Ω–∞—à–ª–∏—Å—å –±–ª–∏–∑–∫–∏–µ –ø–æ —Å–µ—Ä–∏–∏. –ù–∏–∂–µ ‚Äî –ª—É—á—à–∞—è –∏–∑ –Ω–∏—Ö.")
            row = near.iloc[0].to_dict()
            launch_clean = " ".join([t for t in str(row.get("Launch Options","")).split() if t not in {"-novid","-nojoy"}])
            st.subheader("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            st.markdown(f"""
**üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {row.get('CPU','')}
**üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:** {row.get('GPU','')}
**üíæ –û–ó–£:** {row.get('RAM','')}

**üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:**  
{row.get('Game Settings','')}

**üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ (–æ—á–∏—â–µ–Ω–Ω—ã–µ):**  
`{launch_clean}`

**üéõ –ü–∞–Ω–µ–ª—å –¥—Ä–∞–π–≤–µ—Ä–∞ (NVIDIA/AMD):**  
{row.get('Control Panel','')}

**ü™ü –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows (–ø–æ –∂–µ–ª–∞–Ω–∏—é):**  
{row.get('Windows Optimization','')}

**üìä –û–∂–∏–¥–∞–µ–º—ã–π FPS:** {row.get('FPS Estimate','‚Äî')}
**üîó –ò—Å—Ç–æ—á–Ω–∏–∫:** {row.get('Source','')}
""")
    else:
        row = exact.iloc[0].to_dict()
        launch_clean = " ".join([t for t in str(row.get("Launch Options","")).split() if t not in {"-novid","-nojoy"}])
        st.subheader("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.markdown(f"""
**üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {row.get('CPU','')}
**üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:** {row.get('GPU','')}
**üíæ –û–ó–£:** {row.get('RAM','')}

**üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:**  
{row.get('Game Settings','')}

**üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ (–æ—á–∏—â–µ–Ω–Ω—ã–µ):**  
`{launch_clean}`

**üéõ –ü–∞–Ω–µ–ª—å –¥—Ä–∞–π–≤–µ—Ä–∞ (NVIDIA/AMD):**  
{row.get('Control Panel','')}

**ü™ü –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows (–ø–æ –∂–µ–ª–∞–Ω–∏—é):**  
{row.get('Windows Optimization','')}

**üìä –û–∂–∏–¥–∞–µ–º—ã–π FPS:** {row.get('FPS Estimate','‚Äî')}
**üîó –ò—Å—Ç–æ—á–Ω–∏–∫:** {row.get('Source','')}
""")

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –æ–¥–Ω–æ–∫–∞–Ω–∞–ª/–¥–≤—É—Ö–∫–∞–Ω–∞–ª
    st.info("‚ÑπÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ **–æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–π** –û–ó–£ FPS –æ–±—ã—á–Ω–æ –Ω–∏–∂–µ, –ø—Ä–∏ **–¥–≤—É—Ö–∫–∞–Ω–∞–ª—å–Ω–æ–π** ‚Äî –≤—ã—à–µ. –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞–¥—Ä–æ–≤ ‚Äî —Å—Ç–∞–≤—å—Ç–µ –¥–≤—É—Ö–∫–∞–Ω–∞–ª (2√ó8, 2√ó16 –∏ —Ç.–¥.).")

    # –û–ø–∞—Å–Ω—ã–µ —Ç—É–º–±–ª–µ—Ä—ã –¥—Ä–∞–π–≤–µ—Ä–æ–≤ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    with st.expander("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –¥—Ä–∞–π–≤–µ—Ä–æ–≤ (AMD/NVIDIA/Intel)"):
        st.markdown("""
- **AMD Radeon Software**: –Ω–µ –≤–∫–ª—é—á–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Shader Cache –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ ¬´AMD Optimized¬ª, FRTC, Chill) ‚Äî –ª—É—á—à–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä—ã.  
- **NVIDIA**: Low Latency Mode, Max Perf ‚Äî –æ–∫, –Ω–æ –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω–æ V-Sync/Aniso/FXAA.  
- **Intel ARC/iGPU**: –¥–µ—Ä–∂–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤, –Ω–µ –≤–∫–ª—é—á–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã.
""")

st.markdown("---")
st.caption("–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∞–≤—Ç–æ—Ä–∞.")
